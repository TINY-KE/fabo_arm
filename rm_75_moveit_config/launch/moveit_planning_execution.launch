<launch>

  <arg name="rviz_gazebo_config" default="$(find rm_75_gazebo)/config/rviz_gazebo.rviz"/>

<!-- moveit -->
<!-- move group文件是moveit工具箱自动生成的 -->
<!-- 
机器人配置：
MoveIt!提供了一个关节状态发布器节点，可用于发布机器人的当前配置。该节点接收机器人的关节位置作为输入，并将它们发布到适当的ROS话题。
您可以使用与MoveIt!常用的robot_state_publisher软件包来发布关节状态。该软件包接收机器人的URDF（统一机器人描述格式）文件作为输入，并根据当前配置发布关节状态。
-->

<!-- 
世界状态：
规划器所看到的世界的当前状态取决于传感器和环境的设计。一种常见的方法是使用ROS中的传感器消息来获取世界状态，并将其与规划器集成。
您可以使用MoveIt!提供的ROS接口和消息类型，例如使用ROS的PointCloud2消息类型来表示三维点云数据，或使用OccupancyGrid消息类型来表示二维占据栅格地图。
将传感器数据与规划器集成后，您可以将当前世界状态作为消息发布到适当的ROS话题，使其可供规划器和其他节点使用。
通过将上述步骤组合在一起，您可以配置MoveIt!以发布机器人的当前配置和规划器所见的世界的当前状态。请注意，具体的实现细节可能取决于您使用的机器人硬件、传感器和环境。 
-->
 # The planning and execution components of MoveIt! configured to 
 # publish the current configuration of the robot (simulated or real)
 # and the current state of the world as seen by the planner
 <include file="$(find rm_75_moveit_config)/launch/move_group.launch">
  <arg name="publish_monitored_planning_scene" value="true" />
 </include>


 <!-- 可视化 -->
 # The visualization component of MoveIt!
 <include file="$(find rm_75_moveit_config)/launch/moveit_rviz.launch">
  <arg name="rviz_config" value="$(arg rviz_gazebo_config)" />
 </include>





  <!-- 发布tf和关节状态 -->
  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="false"/> 
    <rosparam param="/source_list">[/arm/joint_states]</rosparam>
  </node>



</launch>
